;PAREDES QUADRADAS EXTERNAS
LDA #$06
STA $0200
LDA #$06
STA $0201
LDA #$06
STA $0202
LDA #$06
STA $0203
LDA #$06
STA $0204
LDA #$06
STA $0205
LDA #$06
STA $0206
LDA #$06
STA $0207
LDA #$06
STA $0208
LDA #$06
STA $0209
LDA #$06
STA $020a
LDA #$06
STA $020b
LDA #$06
STA $020c
LDA #$06
STA $020d
LDA #$06
STA $020e
LDA #$06
STA $020f
LDA #$06
STA $0210
LDA #$06
STA $0211
LDA #$06
STA $0212
LDA #$06
STA $0213
LDA #$06
STA $0214
LDA #$06
STA $0215
LDA #$06
STA $0216
LDA #$06
STA $0217
LDA #$06
STA $0218
LDA #$06
STA $0219
LDA #$06
STA $021a
LDA #$06
STA $021b
LDA #$06
STA $021c
LDA #$06
STA $021d
LDA #$06
STA $021e
LDA #$06
STA $021f
LDA #$06
STA $05e0
LDA #$06
STA $05e1
LDA #$06
STA $05e2
LDA #$06
STA $05e3
LDA #$06
STA $05e4
LDA #$06
STA $05e5
LDA #$06
STA $05e6
LDA #$06
STA $05e7
LDA #$06
STA $05e8
LDA #$06
STA $05e9
LDA #$06
STA $05ea
LDA #$06
STA $05eb
LDA #$06
STA $05ec
LDA #$06
STA $05ed
LDA #$06
STA $05ee
LDA #$06
STA $05ef
LDA #$06
STA $05f0
LDA #$06
STA $05f1
LDA #$06
STA $05f2
LDA #$06
STA $05f3
LDA #$06
STA $05f4
LDA #$06
STA $05f5
LDA #$06
STA $05f6
LDA #$06
STA $05f7
LDA #$06
STA $05f8
LDA #$06
STA $05f9
LDA #$06
STA $05fa
LDA #$06
STA $05fb
LDA #$06
STA $05fc
LDA #$06
STA $05fd
LDA #$06
STA $05fe
LDA #$06
STA $05ff
LDA #$06
STA $0200
LDA #$06
STA $0220
LDA #$06
STA $0240
LDA #$06
STA $0260
LDA #$06
STA $0280
LDA #$06
STA $02a0
LDA #$06
STA $02c0
LDA #$06
STA $02e0
LDA #$06
STA $0300
LDA #$06
STA $0320
LDA #$06
STA $0340
LDA #$06
STA $0360
LDA #$06
STA $0380
LDA #$06
STA $03a0
LDA #$06
STA $03c0
LDA #$06
STA $03e0
LDA #$06
STA $0400
LDA #$06
STA $0420
LDA #$06
STA $0440
LDA #$06
STA $0460
LDA #$06
STA $0480
LDA #$06
STA $04a0
LDA #$06
STA $04c0
LDA #$06
STA $04e0
LDA #$06
STA $0500
LDA #$06
STA $0520
LDA #$06
STA $0540
LDA #$06
STA $0560
LDA #$06
STA $0580
LDA #$06
STA $05a0
LDA #$06
STA $05c0
LDA #$06
STA $05e0
LDA #$06
STA $021f
LDA #$06
STA $023f
LDA #$06
STA $025f
LDA #$06
STA $027f
LDA #$06
STA $029f
LDA #$06
STA $02bf
LDA #$06
STA $02df
LDA #$06
STA $02ff
LDA #$06
STA $031f
LDA #$06
STA $033f
LDA #$06
STA $035f
LDA #$06
STA $037f
LDA #$06
STA $039f
LDA #$06
STA $03bf
LDA #$06
STA $03df
LDA #$06
STA $03ff
LDA #$06
STA $041f
LDA #$06
STA $043f
LDA #$06
STA $045f
LDA #$06
STA $047f
LDA #$06
STA $049f
LDA #$06
STA $04bf
LDA #$06
STA $04df
LDA #$06
STA $04ff
LDA #$06
STA $051f
LDA #$06
STA $053f
LDA #$06
STA $055f
LDA #$06
STA $057f
LDA #$06
STA $059f
LDA #$06
STA $05bf
LDA #$06
STA $05df
LDA #$06
STA $05ff

;  ___           _        __ ___  __ ___
; / __|_ _  __ _| |_____ / /| __|/  \_  )
; \__ \ ' \/ _` | / / -_) _ \__ \ () / /
; |___/_||_\__,_|_\_\___\___/___/\__/___|

; Change direction: W A S D

define appleL         $00 ; screen location of apple, low byte
define appleH         $01 ; screen location of apple, high byte
define snakeHeadL     $10 ; screen location of snake head, low byte
define snakeHeadH     $11 ; screen location of snake head, high byte
define snakeBodyStart $12 ; start of snake body byte pairs
define snakeDirection $02 ; direction (possible values are below)
define snakeLength    $03 ; snake length, in bytes

; Directions (each using a separate bit)
define movingUp      1
define movingRight   2
define movingDown    4
define movingLeft    8

; ASCII values of keys controlling the snake
define ASCII_w      $77
define ASCII_a      $61
define ASCII_s      $73
define ASCII_d      $64

; System variables
define sysRandom    $fe
define sysLastKey   $ff


  jsr init
  jsr loop

init:
  jsr initSnake
  jsr generateApplePosition
  rts


initSnake:
  lda #movingRight  ;start direction
  sta snakeDirection

  lda #4  ;start length (2 segments)
  sta snakeLength

  lda #$11
  sta snakeHeadL

  lda #$10
  sta snakeBodyStart

  lda #$0f
  sta $14 ; body segment 1

  lda #$04
  sta snakeHeadH
  sta $13 ; body segment 1
  sta $15 ; body segment 2
  rts


generateApplePosition:
  ;load a new random byte into $00
  lda sysRandom
  sta appleL

  ;load a new random number from 2 to 5 into $01
  lda sysRandom
  and #$03 ;mask out lowest 2 bits
  clc
  adc #2
  sta appleH

  rts


loop:
  jsr readKeys
  jsr checkCollision
  jsr updateSnake
;  jsr drawApple
  jsr drawSnake
  jsr spinWheels
  jmp loop


readKeys:
  lda sysLastKey
  cmp #ASCII_w
  beq upKey
  cmp #ASCII_d
  beq rightKey
  cmp #ASCII_s
  beq downKey
  cmp #ASCII_a
  beq leftKey
  rts
upKey:
  lda #movingDown
  bit snakeDirection
  bne illegalMove

  lda #movingUp
  sta snakeDirection
  rts
rightKey:
  lda #movingLeft
  bit snakeDirection
  bne illegalMove

  lda #movingRight
  sta snakeDirection
  rts
downKey:
  lda #movingUp
  bit snakeDirection
  bne illegalMove

  lda #movingDown
  sta snakeDirection
  rts
leftKey:
  lda #movingRight
  bit snakeDirection
  bne illegalMove

  lda #movingLeft
  sta snakeDirection
  rts
illegalMove:
  rts


checkCollision:
;  jsr checkAppleCollision
  jsr checkSnakeCollision
  rts


checkAppleCollision:
  lda appleL
  cmp snakeHeadL
  bne doneCheckingAppleCollision
  lda appleH
  cmp snakeHeadH
  bne doneCheckingAppleCollision

  ;eat apple
  inc snakeLength
  inc snakeLength ;increase length
  jsr generateApplePosition
doneCheckingAppleCollision:
  rts


checkSnakeCollision:
  ldx #2 ;start with second segment
snakeCollisionLoop:
  lda snakeHeadL,x
  cmp snakeHeadL
  bne continueCollisionLoop

maybeCollided:
  lda snakeHeadH,x
  cmp snakeHeadH
  beq didCollide

continueCollisionLoop:
  inx
  inx
  cpx snakeLength          ;got to last section with no collision
  beq didntCollide
  jmp snakeCollisionLoop

didCollide:
  rts
;  jmp gameOver
didntCollide:
  rts


updateSnake:
  ldx snakeLength
  dex
  txa
updateloop:
  lda snakeHeadL,x
  sta snakeBodyStart,x
  dex
  bpl updateloop

  lda snakeDirection
  lsr
  bcs up
  lsr
  bcs right
  lsr
  bcs down
  lsr
  bcs left
up:
  lda snakeHeadL
  sec
  sbc #$20
  sta snakeHeadL
  bcc upup
  rts
upup:
  dec snakeHeadH
  lda #$1
  cmp snakeHeadH
  beq collision
  rts
right:
  inc snakeHeadL
  lda #$1f
  bit snakeHeadL
  beq collision
  rts
down:
  lda snakeHeadL
  clc
  adc #$20
  sta snakeHeadL
  bcs downdown
  rts
downdown:
  inc snakeHeadH
  lda #$6
  cmp snakeHeadH
  beq collision
  rts
left:
  dec snakeHeadL
  lda snakeHeadL
  and #$1f
  cmp #$1f
  beq collision
  rts
collision:
  jmp gameOver


drawApple:
  ldy #0
  lda sysRandom
  sta (appleL),y
  rts


drawSnake:
  ldx snakeLength
  lda #0
  sta (snakeHeadL,x) ; erase end of tail

  ldx #0
  lda #1
  sta (snakeHeadL,x) ; paint head
  rts


spinWheels:
  ldx #0
spinloop:
  nop
  nop
  dex
  bne spinloop
  rts


gameOver:
